<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use App\Models\Product;
use App\Models\Category;

class IntelligentChatBotService
{
    private $openaiApiKey;
    private $contextService;
    private $knowledgeBase;

    public function __construct(ConversationContextService $contextService)
    {
        $this->openaiApiKey = env('OPENAI_API_KEY');
        $this->contextService = $contextService;
        $this->loadKnowledgeBase();
    }

    private function loadKnowledgeBase()
    {
        $this->knowledgeBase = [
            'company_info' => [
                'name' => 'Vicnex',
                'description' => 'C·ª≠a h√†ng c·∫ßu l√¥ng chuy√™n nghi·ªáp h√†ng ƒë·∫ßu Vi·ªát Nam',
                'services' => [
                    'B√°n v·ª£t c·∫ßu l√¥ng ch√≠nh h√£ng',
                    'Gi√†y c·∫ßu l√¥ng chuy√™n nghi·ªáp', 
                    'Trang ph·ª•c th·ªÉ thao',
                    'ƒê·∫∑t s√¢n c·∫ßu l√¥ng tr·ª±c tuy·∫øn',
                    'Ph·ª• ki·ªán v√† b·∫£o d∆∞·ª°ng v·ª£t'
                ],
                'brands' => ['Yonex', 'Lining', 'Victor', 'Mizuno', 'Apacs'],
                'locations' => 'C√≥ nhi·ªÅu chi nh√°nh t·∫°i TP.HCM v√† H√† N·ªôi'
            ],
            'badminton_knowledge' => [
                'racket_types' => [
                    'Attack (T·∫•n c√¥ng)' => 'Head-heavy, th√¢n c·ª©ng, ph√π h·ª£p smash m·∫°nh',
                    'Defense (Ph√≤ng th·ªß)' => 'Head-light, th√¢n m·ªÅm, ph·∫£n x·∫° nhanh', 
                    'Control (Ki·ªÉm so√°t)' => 'C√¢n b·∫±ng, ƒëa nƒÉng, ch√≠nh x√°c cao'
                ],
                'skill_levels' => [
                    'Ng∆∞·ªùi m·ªõi' => 'V·ª£t nh·∫π, gi√° ph·∫£i chƒÉng, d·ªÖ ƒëi·ªÅu khi·ªÉn',
                    'Trung b√¨nh' => 'V·ª£t c√¢n b·∫±ng, ch·∫•t l∆∞·ª£ng t·ªët',
                    'Chuy√™n nghi·ªáp' => 'V·ª£t cao c·∫•p, c√¥ng ngh·ªá ti√™n ti·∫øn'
                ],
                'brands_info' => [
                    'Yonex' => 'Th∆∞∆°ng hi·ªáu s·ªë 1 th·∫ø gi·ªõi, c√¥ng ngh·ªá Namd, Nanometric',
                    'Lining' => 'Th∆∞∆°ng hi·ªáu Trung Qu·ªëc ch·∫•t l∆∞·ª£ng cao, gi√° c·∫°nh tranh',
                    'Victor' => 'Th∆∞∆°ng hi·ªáu ƒê√†i Loan, c√¥ng ngh·ªá Nano Tec'
                ]
            ]
        ];
    }

    public function processMessage($question, $sessionId = 'default')
    {
        try {
            // L·∫•y context cu·ªôc h·ªôi tho·∫°i
            $context = $this->contextService->getContext($sessionId);
            $conversationHistory = $this->buildConversationHistory($context);
            
            // T·∫°o system prompt v·ªõi knowledge base
            $systemPrompt = $this->buildSystemPrompt();
            
            // G·ªçi OpenAI API
            $aiResponse = $this->callOpenAI($systemPrompt, $conversationHistory, $question);
            
            // Ph√¢n t√≠ch xem c√≥ c·∫ßn recommend s·∫£n ph·∫©m kh√¥ng
            $products = $this->extractProductRecommendations($aiResponse, $question);
            
            // L∆∞u context
            $this->contextService->storeContext($sessionId, 'ai_conversation', [
                'question' => $question,
                'response' => $aiResponse
            ]);
            
            return [
                'answer' => $aiResponse,
                'products' => $products,
                'intent' => $this->detectIntent($question),
                'session_id' => $sessionId
            ];
            
        } catch (\Exception $e) {
            Log::error('Intelligent ChatBot error: ' . $e->getMessage());
            
            // Fallback to rule-based response
            return $this->getFallbackResponse($question, $sessionId);
        }
    }

    private function buildSystemPrompt()
    {
        $company = $this->knowledgeBase['company_info'];
        $knowledge = $this->knowledgeBase['badminton_knowledge'];
        
        return "B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng chuy√™n nghi·ªáp c·ªßa {$company['name']} - {$company['description']}.

üè¢ **Th√¥ng tin c√¥ng ty:**
- D·ªãch v·ª•: " . implode(', ', $company['services']) . "
- Th∆∞∆°ng hi·ªáu: " . implode(', ', $company['brands']) . "
- ƒê·ªãa ƒëi·ªÉm: {$company['locations']}

üè∏ **Ki·∫øn th·ª©c c·∫ßu l√¥ng:**
- Lo·∫°i v·ª£t: T·∫•n c√¥ng (head-heavy, c·ª©ng), Ph√≤ng th·ªß (head-light, m·ªÅm), Ki·ªÉm so√°t (c√¢n b·∫±ng)
- Tr√¨nh ƒë·ªô: M·ªõi h·ªçc (v·ª£t nh·∫π, r·∫ª), Trung b√¨nh (c√¢n b·∫±ng), Chuy√™n nghi·ªáp (cao c·∫•p)
- Th∆∞∆°ng hi·ªáu: Yonex (s·ªë 1 th·∫ø gi·ªõi), Lining (ch·∫•t l∆∞·ª£ng cao), Victor (c√¥ng ngh·ªá)

üéØ **Nhi·ªám v·ª• c·ªßa b·∫°n:**
1. Tr·∫£ l·ªùi t·∫•t c·∫£ c√¢u h·ªèi m·ªôt c√°ch th√¥ng minh v√† h·ªØu √≠ch
2. T∆∞ v·∫•n s·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu kh√°ch h√†ng  
3. H∆∞·ªõng d·∫´n v·ªÅ k·ªπ thu·∫≠t, lu·∫≠t ch∆°i c·∫ßu l√¥ng
4. Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ d·ªãch v·ª•, ch√≠nh s√°ch
5. T·∫°o kh√¥ng kh√≠ th√¢n thi·ªán, chuy√™n nghi·ªáp

üìã **Phong c√°ch tr·∫£ l·ªùi:**
- Th√¢n thi·ªán, nhi·ªát t√¨nh, chuy√™n nghi·ªáp
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ, th·ª±c t·∫ø
- Khi kh√¥ng bi·∫øt, h√£y th√†nh th·∫≠t v√† g·ª£i √Ω li√™n h·ªá hotline
- Lu√¥n h∆∞·ªõng kh√°ch h√†ng ƒë·∫øn s·∫£n ph·∫©m/d·ªãch v·ª• ph√π h·ª£p

H√£y tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi m·ªôt c√°ch t·ª± nhi√™n v√† h·ªØu √≠ch nh·∫•t c√≥ th·ªÉ!";
    }

    private function buildConversationHistory($context)
    {
        if (!$context || empty($context['history'])) {
            return [];
        }
        
        $messages = [];
        $recentHistory = array_slice($context['history'], -5); // L·∫•y 5 l∆∞·ª£t cu·ªëi
        
        foreach ($recentHistory as $item) {
            if (isset($item['data']['question']) && isset($item['data']['response'])) {
                $messages[] = ['role' => 'user', 'content' => $item['data']['question']];
                $messages[] = ['role' => 'assistant', 'content' => $item['data']['response']];
            }
        }
        
        return $messages;
    }

    private function callOpenAI($systemPrompt, $conversationHistory, $question)
    {
        if (!$this->openaiApiKey) {
            throw new \Exception('OpenAI API key not configured');
        }

        $messages = [
            ['role' => 'system', 'content' => $systemPrompt]
        ];
        
        // Th√™m l·ªãch s·ª≠ h·ªôi tho·∫°i
        $messages = array_merge($messages, $conversationHistory);
        
        // Th√™m c√¢u h·ªèi hi·ªán t·∫°i
        $messages[] = ['role' => 'user', 'content' => $question];

        $response = Http::withHeaders([
            'Authorization' => 'Bearer ' . $this->openaiApiKey,
            'Content-Type' => 'application/json',
        ])->timeout(30)->post('https://api.openai.com/v1/chat/completions', [
            'model' => 'gpt-3.5-turbo',
            'messages' => $messages,
            'max_tokens' => 500,
            'temperature' => 0.7,
            'frequency_penalty' => 0.3,
            'presence_penalty' => 0.3
        ]);

        if (!$response->successful()) {
            throw new \Exception('OpenAI API call failed: ' . $response->body());
        }

        $data = $response->json();
        return $data['choices'][0]['message']['content'] ?? 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y.';
    }

    private function extractProductRecommendations($aiResponse, $question)
    {
        $question = strtolower($question);
        $products = collect();

        // Ph√¢n t√≠ch t·ª´ kh√≥a ƒë·ªÉ recommend s·∫£n ph·∫©m
        if (str_contains($question, 'v·ª£t') || str_contains($aiResponse, 'v·ª£t')) {
            $products = Product::where('Categories_ID', 1)
                ->where('Status', 1)
                ->orderBy('Price', 'desc')
                ->take(3)
                ->get();
        } elseif (str_contains($question, 'gi√†y') || str_contains($aiResponse, 'gi√†y')) {
            $products = Product::where('Categories_ID', 2)
                ->where('Status', 1)
                ->orderBy('Price', 'desc')
                ->take(3)
                ->get();
        } elseif (str_contains($question, '√°o') || str_contains($question, 'qu·∫ßn') || 
                  str_contains($aiResponse, 'trang ph·ª•c')) {
            $products = Product::where('Categories_ID', 3)
                ->where('Status', 1)
                ->take(3)
                ->get();
        } elseif (str_contains($question, 'ƒë·∫Øt') || str_contains($question, 'cao c·∫•p')) {
            $products = Product::where('Status', 1)
                ->orderBy('Price', 'desc')
                ->take(3)
                ->get();
        } elseif (str_contains($question, 'r·∫ª') || str_contains($question, 'gi√° t·ªët')) {
            $products = Product::where('Status', 1)
                ->orderBy('Price', 'asc')
                ->take(3)
                ->get();
        }

        // Format products
        return $products->map(function ($product) {
            return [
                'id' => $product->Product_ID,
                'name' => $product->Name,
                'price' => $product->Discount_price ?: $product->Price,
                'original_price' => $product->Price,
                'image' => $this->getImageUrl($product->Image),
                'brand' => $product->Brand,
                'description' => $product->Description ? substr($product->Description, 0, 100) . '...' : 'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao'
            ];
        });
    }

    private function detectIntent($question)
    {
        $question = strtolower($question);
        
        if (str_contains($question, 'v·ª£t')) return 'racket_inquiry';
        if (str_contains($question, 'gi√†y')) return 'shoes_inquiry';
        if (str_contains($question, 'ƒë·∫∑t s√¢n')) return 'court_booking';
        if (str_contains($question, 'gi√°')) return 'price_inquiry';
        if (str_contains($question, 'th∆∞∆°ng hi·ªáu')) return 'brand_inquiry';
        
        return 'general_conversation';
    }

    private function getFallbackResponse($question, $sessionId)
    {
        $fallbackResponses = [
            "C√¢u h·ªèi th√∫ v·ªã ƒë·∫•y! Tuy t√¥i ch∆∞a hi·ªÉu r√µ l·∫Øm, nh∆∞ng t√¥i c√≥ th·ªÉ gi√∫p b·∫°n t∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m c·∫ßu l√¥ng. B·∫°n c·∫ßn t∆∞ v·∫•n g√¨ c·ª• th·ªÉ kh√¥ng?",
            
            "Hmm, ƒë·ªÉ t√¥i suy nghƒ©... B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ v·ª£t, gi√†y, trang ph·ª•c c·∫ßu l√¥ng, ho·∫∑c ƒë·∫∑t s√¢n. T√¥i s·∫Ω t∆∞ v·∫•n chi ti·∫øt cho b·∫°n!",
            
            "C√¢u h·ªèi hay ƒë·∫•y! T√¥i c√≥ th·ªÉ kh√¥ng hi·ªÉu h·∫øt, nh∆∞ng v·ªÅ c·∫ßu l√¥ng th√¨ t√¥i bi·∫øt r·∫•t nhi·ªÅu. B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ s·∫£n ph·∫©m n√†o kh√¥ng?"
        ];

        return [
            'answer' => $fallbackResponses[array_rand($fallbackResponses)],
            'products' => $this->getRandomProducts(),
            'intent' => 'fallback',
            'session_id' => $sessionId
        ];
    }

    private function getRandomProducts()
    {
        $products = Product::where('Status', 1)
            ->inRandomOrder()
            ->take(3)
            ->get();
            
        return $products->map(function ($product) {
            return [
                'id' => $product->Product_ID,
                'name' => $product->Name,
                'price' => $product->Discount_price ?: $product->Price,
                'original_price' => $product->Price,
                'image' => $this->getImageUrl($product->Image),
                'brand' => $product->Brand,
                'description' => $product->Description ? substr($product->Description, 0, 100) . '...' : 'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao'
            ];
        });
    }

    private function getImageUrl($image)
    {
        if (!$image) return '/no-image.png';
        if (strpos($image, 'http') === 0) return $image;
        if (strpos($image, 'uploads/') === 0) return "http://localhost:8000/$image";
        return "http://localhost:8000/uploads/products/$image";
    }
}